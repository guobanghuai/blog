{"remainingRequest":"/Users/gbh/Desktop/gbh/blog/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/gbh/Desktop/gbh/blog/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/gbh/Desktop/gbh/blog/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/gbh/Desktop/gbh/blog/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/gbh/Desktop/gbh/blog/docs/basic/sort.md?vue&type=template&id=48e47240&","dependencies":[{"path":"/Users/gbh/Desktop/gbh/blog/docs/basic/sort.md","mtime":1548231093899},{"path":"/Users/gbh/Desktop/gbh/blog/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/gbh/Desktop/gbh/blog/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/gbh/Desktop/gbh/blog/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/gbh/Desktop/gbh/blog/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/gbh/Desktop/gbh/blog/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":499162500000}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"排序\\\">排序</h1> <h2 id=\\\"冒泡排序\\\">冒泡排序</h2> <p>通过重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成</p> <div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">bubbleSort</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> arr<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> j <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> j <span class=\\\"token operator\\\">&lt;</span> arr<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token operator\\\">-</span> i<span class=\\\"token punctuation\\\">;</span> j<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">[</span>j<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">&gt;</span> arr<span class=\\\"token punctuation\\\">[</span>j <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">let</span> temp <span class=\\\"token operator\\\">=</span> arr<span class=\\\"token punctuation\\\">[</span>j<span class=\\\"token punctuation\\\">]</span>\\n        arr<span class=\\\"token punctuation\\\">[</span>j<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> arr<span class=\\\"token punctuation\\\">[</span>j <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span>\\n        arr<span class=\\\"token punctuation\\\">[</span>j <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> temp\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">return</span> arr\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div><h2 id=\\\"插入排序\\\">插入排序</h2> <p>通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入</p> <div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">insertion</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> arr<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> j <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> j <span class=\\\"token operator\\\">&lt;</span> i<span class=\\\"token punctuation\\\">;</span> j<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">[</span>j<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">&gt;</span> arr<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        arr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">splice</span><span class=\\\"token punctuation\\\">(</span>j<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> arr<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n        arr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">splice</span><span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token keyword\\\">break</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">return</span> arr\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div><h2 id=\\\"快速排序\\\">快速排序</h2> <ol><li>在数据集之中，选择一个元素作为&quot;基准&quot;（pivot）。</li> <li>所有小于&quot;基准&quot;的元素，都移到&quot;基准&quot;的左边；所有大于&quot;基准&quot;的元素，都移到&quot;基准&quot;的右边。</li> <li>对&quot;基准&quot;左边和右边的两个子集，不断重复第一步和第二步，直到所有子集只剩下一个元素为止。</li></ol> <div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">quickSort</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">return</span> arr\\n\\n  <span class=\\\"token keyword\\\">const</span> pivot <span class=\\\"token operator\\\">=</span> arr<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span>\\n  <span class=\\\"token keyword\\\">const</span> left <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span>\\n  <span class=\\\"token keyword\\\">const</span> right <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span>\\n\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> arr<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    arr<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">&gt;=</span> pivot <span class=\\\"token operator\\\">&amp;&amp;</span> right<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n    arr<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">&lt;</span> pivot <span class=\\\"token operator\\\">&amp;&amp;</span> left<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">quickSort</span><span class=\\\"token punctuation\\\">(</span>left<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">concat</span><span class=\\\"token punctuation\\\">(</span>pivot<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">quickSort</span><span class=\\\"token punctuation\\\">(</span>right<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div><div class=\\\"tip custom-block\\\"><p class=\\\"custom-block-title\\\">TIP</p> <p>上面的版本缺点是需要额外的存储器配置，以下为原地（in-place）分割方法</p></div> <div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">quickSort</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">,</span> left<span class=\\\"token punctuation\\\">,</span> right<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> len <span class=\\\"token operator\\\">=</span> arr<span class=\\\"token punctuation\\\">.</span>length\\n  <span class=\\\"token keyword\\\">let</span> partitionIndex\\n  left <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">typeof</span> left <span class=\\\"token operator\\\">!==</span> <span class=\\\"token string\\\">'number'</span> <span class=\\\"token operator\\\">?</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token punctuation\\\">:</span> left\\n  right <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">typeof</span> right <span class=\\\"token operator\\\">!==</span> <span class=\\\"token string\\\">'number'</span> <span class=\\\"token operator\\\">?</span> len <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token punctuation\\\">:</span> right\\n\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>left <span class=\\\"token operator\\\">&lt;</span> right<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    partitionIndex <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">partition</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">,</span> left<span class=\\\"token punctuation\\\">,</span> right<span class=\\\"token punctuation\\\">)</span>\\n\\n    <span class=\\\"token function\\\">quickSort</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">,</span> left<span class=\\\"token punctuation\\\">,</span> partitionIndex <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span>\\n\\n    <span class=\\\"token function\\\">quickSort</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">,</span> partitionIndex <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> right<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> arr\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">partition</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">,</span> left<span class=\\\"token punctuation\\\">,</span> right<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> pivot <span class=\\\"token operator\\\">=</span> left\\n  <span class=\\\"token keyword\\\">let</span> index <span class=\\\"token operator\\\">=</span> pivot <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span>\\n\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">var</span> i <span class=\\\"token operator\\\">=</span> index<span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;=</span> right<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">&lt;</span> arr<span class=\\\"token punctuation\\\">[</span>pivot<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">swap</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">,</span> i<span class=\\\"token punctuation\\\">,</span> index<span class=\\\"token punctuation\\\">)</span>\\n      index<span class=\\\"token operator\\\">++</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">swap</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">,</span> pivot<span class=\\\"token punctuation\\\">,</span> index <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> index <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">swap</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">,</span> i<span class=\\\"token punctuation\\\">,</span> j<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> temp <span class=\\\"token operator\\\">=</span> arr<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span>\\n  arr<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> arr<span class=\\\"token punctuation\\\">[</span>j<span class=\\\"token punctuation\\\">]</span>\\n  arr<span class=\\\"token punctuation\\\">[</span>j<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> temp\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div><h2 id=\\\"选择排序\\\">选择排序</h2> <p>首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕</p> <div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">selectionSort</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> arr<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">let</span> min <span class=\\\"token operator\\\">=</span> i\\n\\n    <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> j <span class=\\\"token operator\\\">=</span> i <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span> j <span class=\\\"token operator\\\">&lt;</span> arr<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> j<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">[</span>min<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">&gt;</span> arr<span class=\\\"token punctuation\\\">[</span>j<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        min <span class=\\\"token operator\\\">=</span> j\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">let</span> temp <span class=\\\"token operator\\\">=</span> arr<span class=\\\"token punctuation\\\">[</span>min<span class=\\\"token punctuation\\\">]</span>\\n    arr<span class=\\\"token punctuation\\\">[</span>min<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> arr<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span>\\n    arr<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> temp\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> arr\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div><h2 id=\\\"归并排序\\\">归并排序</h2> <h3 id=\\\"递归法\\\">递归法</h3> <ol><li>把 n 个元素看成 n 个长度为 l 的有序子表</li> <li>进行两两归并使记录关键字有序，得到 n/2 个长度为 2 的有序子表</li> <li>重复第 2 步直到所有记录归并成一个长度为 n 的有序表为止</li></ol> <div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">mergeSort</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">return</span> arr\\n\\n  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">merge</span><span class=\\\"token punctuation\\\">(</span>left<span class=\\\"token punctuation\\\">,</span> right<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">let</span> final <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span>\\n\\n    <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span>left<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">&amp;&amp;</span> right<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      final<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>left<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">&lt;=</span> right<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">?</span> left<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">shift</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">:</span> right<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">shift</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">return</span> final<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">concat</span><span class=\\\"token punctuation\\\">(</span>left<span class=\\\"token punctuation\\\">,</span> right<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">let</span> mid <span class=\\\"token operator\\\">=</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">floor</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">merge</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">mergeSort</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">slice</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> mid<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">mergeSort</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">slice</span><span class=\\\"token punctuation\\\">(</span>mid<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div><h2 id=\\\"堆排序\\\">堆排序</h2> <div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">heapSort</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">swap</span><span class=\\\"token punctuation\\\">(</span>i<span class=\\\"token punctuation\\\">,</span> j<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">let</span> tmp <span class=\\\"token operator\\\">=</span> arr<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span>\\n    arr<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> arr<span class=\\\"token punctuation\\\">[</span>j<span class=\\\"token punctuation\\\">]</span>\\n    arr<span class=\\\"token punctuation\\\">[</span>j<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> tmp\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">max_heapify</span><span class=\\\"token punctuation\\\">(</span>start<span class=\\\"token punctuation\\\">,</span> end<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">let</span> dad <span class=\\\"token operator\\\">=</span> start\\n    <span class=\\\"token keyword\\\">let</span> son <span class=\\\"token operator\\\">=</span> dad <span class=\\\"token operator\\\">*</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span>\\n\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>son <span class=\\\"token operator\\\">&gt;=</span> end<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">return</span>\\n\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>son <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token operator\\\">&lt;</span> end <span class=\\\"token operator\\\">&amp;&amp;</span> arr<span class=\\\"token punctuation\\\">[</span>son<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">&lt;</span> arr<span class=\\\"token punctuation\\\">[</span>son <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n      son<span class=\\\"token operator\\\">++</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">[</span>dad<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">&lt;=</span> arr<span class=\\\"token punctuation\\\">[</span>son<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">swap</span><span class=\\\"token punctuation\\\">(</span>dad<span class=\\\"token punctuation\\\">,</span> son<span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token function\\\">max_heapify</span><span class=\\\"token punctuation\\\">(</span>son<span class=\\\"token punctuation\\\">,</span> end<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">let</span> len <span class=\\\"token operator\\\">=</span> arr<span class=\\\"token punctuation\\\">.</span>length\\n\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">floor</span><span class=\\\"token punctuation\\\">(</span>len <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&gt;=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">--</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">max_heapify</span><span class=\\\"token punctuation\\\">(</span>i<span class=\\\"token punctuation\\\">,</span> len<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> len <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&gt;</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">--</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">swap</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> i<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token function\\\">max_heapify</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> i<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> arr\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div><h2 id=\\\"计数排序\\\">计数排序</h2> <ol><li>统计数组中每个值为 <code>i</code> 的元素出现的次数，存入数组 <code>C</code> 的第 <code>i</code> 项</li> <li>反向填充目标数组：将每个元素 <code>i</code> 放在新数组的第 <code>C[i]</code> 项，每放一个元素就将 <code>C[i]</code> 减去 1</li></ol> <div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">countSort</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> <span class=\\\"token constant\\\">C</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span>\\n\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> arr<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">let</span> num <span class=\\\"token operator\\\">=</span> arr<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span>\\n    <span class=\\\"token constant\\\">C</span><span class=\\\"token punctuation\\\">[</span>num<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">&gt;=</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token operator\\\">?</span> <span class=\\\"token constant\\\">C</span><span class=\\\"token punctuation\\\">[</span>num<span class=\\\"token punctuation\\\">]</span><span class=\\\"token operator\\\">++</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">C</span><span class=\\\"token punctuation\\\">[</span>num<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">let</span> sortArr <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span>\\n\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> j <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> j <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token constant\\\">C</span><span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> j<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">C</span><span class=\\\"token punctuation\\\">[</span>j<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">while</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">C</span><span class=\\\"token punctuation\\\">[</span>j<span class=\\\"token punctuation\\\">]</span><span class=\\\"token operator\\\">&gt;</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n        sortArr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>j<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token constant\\\">C</span><span class=\\\"token punctuation\\\">[</span>j<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">--</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">return</span> sortArr\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div><h2 id=\\\"桶排序\\\">桶排序</h2> <p>桶排序是计数排序的升级版。它利用了函数的映射关系，高效与否的关键就在于这个映射函数的确定。为了使桶排序更加高效，我们需要做到这两点：</p> <ol><li>在额外空间充足的情况下，尽量增大桶的数量</li> <li>使用的映射函数能够将输入的 N 个数据均匀的分配到 K 个桶中</li></ol> <p>同时，对于桶中元素的排序，选择何种比较排序算法对于性能的影响至关重要</p> <div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// 不理解，先复制记录下来 ...</span>\\nArray<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">bucketSort</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>num<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">swap</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">,</span> i<span class=\\\"token punctuation\\\">,</span> j<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> temp <span class=\\\"token operator\\\">=</span> arr<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span>\\n    arr<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> arr<span class=\\\"token punctuation\\\">[</span>j<span class=\\\"token punctuation\\\">]</span>\\n    arr<span class=\\\"token punctuation\\\">[</span>j<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> temp\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">const</span> max <span class=\\\"token operator\\\">=</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">max</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">...</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">const</span> min <span class=\\\"token operator\\\">=</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">min</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">...</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">const</span> buckets <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span>\\n  <span class=\\\"token keyword\\\">const</span> bucketsSize <span class=\\\"token operator\\\">=</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">floor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>max <span class=\\\"token operator\\\">-</span> min<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">/</span> num<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span>\\n  <span class=\\\"token keyword\\\">for</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> index <span class=\\\"token operator\\\">=</span> <span class=\\\"token operator\\\">~</span><span class=\\\"token operator\\\">~</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">/</span> bucketsSize<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token operator\\\">!</span>buckets<span class=\\\"token punctuation\\\">[</span>index<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">&amp;&amp;</span> <span class=\\\"token punctuation\\\">(</span>buckets<span class=\\\"token punctuation\\\">[</span>index<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n    buckets<span class=\\\"token punctuation\\\">[</span>index<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">let</span> l <span class=\\\"token operator\\\">=</span> buckets<span class=\\\"token punctuation\\\">[</span>index<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span>length\\n    <span class=\\\"token keyword\\\">while</span><span class=\\\"token punctuation\\\">(</span>l <span class=\\\"token operator\\\">&gt;</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      buckets<span class=\\\"token punctuation\\\">[</span>index<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">[</span>l<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">&lt;</span> buckets<span class=\\\"token punctuation\\\">[</span>index<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">[</span>l <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">&amp;&amp;</span> <span class=\\\"token function\\\">swap</span><span class=\\\"token punctuation\\\">(</span>buckets<span class=\\\"token punctuation\\\">[</span>index<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> l<span class=\\\"token punctuation\\\">,</span> l <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span>\\n      l<span class=\\\"token operator\\\">--</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">let</span> wrapBuckets <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span>\\n  <span class=\\\"token keyword\\\">for</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> buckets<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    buckets<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">&amp;&amp;</span> <span class=\\\"token punctuation\\\">(</span>wrapBuckets <span class=\\\"token operator\\\">=</span> wrapBuckets<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">concat</span><span class=\\\"token punctuation\\\">(</span>buckets<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">return</span> wrapBuckets\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div> \"),_c('comment-comment')],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}