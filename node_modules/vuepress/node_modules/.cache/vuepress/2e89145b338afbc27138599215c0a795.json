{"remainingRequest":"/Users/gbh/Desktop/gbh/blog/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/gbh/Desktop/gbh/blog/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/gbh/Desktop/gbh/blog/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/gbh/Desktop/gbh/blog/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/gbh/Desktop/gbh/blog/docs/js/module.md?vue&type=template&id=b3b687b2&","dependencies":[{"path":"/Users/gbh/Desktop/gbh/blog/docs/js/module.md","mtime":1548228517317},{"path":"/Users/gbh/Desktop/gbh/blog/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/gbh/Desktop/gbh/blog/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/gbh/Desktop/gbh/blog/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/gbh/Desktop/gbh/blog/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/gbh/Desktop/gbh/blog/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":499162500000}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"模块\\\">模块</h1> <p>在使用 <code>rollup</code> 或者 <code>browserify</code> 时总遇到打包模式选择的问题，这里记录总结一下。</p> <h2 id=\\\"what\\\">what ?</h2> <ul><li>将一个复杂的程序根据不同的规则（逻辑，分工）分成不同的模块，使之条理的组合在一起工作</li> <li>模块的内部数据与实现是私有的，外部仅能通过模块暴露的方法与属性与之通信或调用</li></ul> <h2 id=\\\"why\\\">why ?</h2> <ul><li>避免命名冲突(减少命名空间污染)</li> <li>更好的分离, 按需加载</li> <li>更高复用性</li> <li>高可维护性</li></ul> <h2 id=\\\"“原始”的模块化\\\">“原始”的模块化</h2> <p>“原始”指的是时间上的原始，存在于大部分前后未分离的项目中</p> <p>存在的问题：</p> <ul><li>全局作用域下容易造成变量冲突</li> <li>外部可以随意更改内部的数据和方法，维护困难</li> <li>文件只能按照 <code>script</code> 的书写顺序进行加载，会造成多个请求</li> <li>开发人员必须主观解决模块和代码库的依赖关系</li> <li>在大型项目中各种资源难以管理，长期积累的问题导致代码库混乱不堪</li></ul> <h3 id=\\\"全局function模式\\\">全局function模式</h3> <p>将不同的功能封装成不同的全局函数</p> <div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">bar</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div><h3 id=\\\"namespace-命名空间\\\">namespace (命名空间)</h3> <p>将数据和功能放在对象中</p> <div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> module1 <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  data<span class=\\\"token punctuation\\\">:</span><span class=\\\"token string\\\">'https://qishaoxuan.github.io/blog/'</span><span class=\\\"token punctuation\\\">,</span>\\n  foo<span class=\\\"token punctuation\\\">:</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  bar<span class=\\\"token punctuation\\\">:</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div><h3 id=\\\"iife-立即调用的函数表达式\\\">IIFE (立即调用的函数表达式)</h3> <p>匿名函数自调用(闭包)</p> <p>通过在全局对象 <code>window</code> 上挂载属性或方法来暴露接口</p> <p>保证模块独立性的同时，也使得模块之间的依赖关系变得明显</p> <div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>window<span class=\\\"token punctuation\\\">,</span> $<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> data <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'www.baidu.com'</span>\\n  <span class=\\\"token comment\\\">//操作数据的函数</span>\\n  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">otherFun</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">bar</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">otherFun</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token string\\\">'hello, world'</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token comment\\\">//暴露行为</span>\\n  window<span class=\\\"token punctuation\\\">.</span>module1 <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> foo<span class=\\\"token punctuation\\\">,</span> bar <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span>window<span class=\\\"token punctuation\\\">,</span> jQuery<span class=\\\"token punctuation\\\">)</span>\\n</code></pre></div><div class=\\\"language-html extra-class\\\"><pre class=\\\"language-html\\\"><code><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>script</span> <span class=\\\"token attr-name\\\">type</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>text/javascript<span class=\\\"token punctuation\\\">&quot;</span></span> <span class=\\\"token attr-name\\\">src</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>jquery-1.10.1.js<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span><span class=\\\"token script language-javascript\\\"></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>script</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>script</span> <span class=\\\"token attr-name\\\">type</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>text/javascript<span class=\\\"token punctuation\\\">&quot;</span></span> <span class=\\\"token attr-name\\\">src</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>module.js<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span><span class=\\\"token script language-javascript\\\"></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>script</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>script</span> <span class=\\\"token attr-name\\\">type</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>text/javascript<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span><span class=\\\"token script language-javascript\\\">\\n  module1<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>script</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n</code></pre></div><h2 id=\\\"模块化规范\\\">模块化规范</h2> <p>为了解决上述“原始”方法的问题，不同的模块规范出现了。</p> <h3 id=\\\"commonjs\\\">CommonJS</h3> <p>通过 <code>require</code> 方法来同步加载所要依赖的其他模块，然后通过 <code>exports</code> 或 <code>module.exports</code> 来导出需要暴露的接口</p> <p>nodejs 采用该规范</p> <div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// modle1.js</span>\\n<span class=\\\"token keyword\\\">const</span> foo <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">bar</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">return</span> <span class=\\\"token string\\\">'hello, world'</span><span class=\\\"token punctuation\\\">}</span>\\n\\nmodule<span class=\\\"token punctuation\\\">.</span>exports<span class=\\\"token punctuation\\\">.</span>foo <span class=\\\"token operator\\\">=</span> foo\\nmodule<span class=\\\"token punctuation\\\">.</span>exports<span class=\\\"token punctuation\\\">.</span>bar <span class=\\\"token operator\\\">=</span> bar\\n\\n<span class=\\\"token comment\\\">// 也可以写为</span>\\n\\nmodule<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  foo<span class=\\\"token punctuation\\\">:</span>foo<span class=\\\"token punctuation\\\">,</span>\\n  bar<span class=\\\"token punctuation\\\">:</span>bar\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// main.js</span>\\n<span class=\\\"token keyword\\\">const</span> module1 <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./module1.js'</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">aa</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>module1<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">bar</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div><p><code>CommonJS</code> 加载模块是同步的，在服务器环境下是没问题的，然而在浏览器中，同步加载会导致性能、可用性、调试和跨域访问等问题。借助 <code>browserify</code> 可以解决，但是也使得下述两种规范的诞生。</p> <h3 id=\\\"amd\\\">AMD</h3> <p>AMD 规范只有一个主要接口 define(id?, dependencies?, factory)，它要在声明模块的时候指定所有的依赖 dependencies，并且还要当做形参传到 factory 中，对于依赖的模块提前执行，依赖前置。</p> <div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token function\\\">define</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;module&quot;</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">&quot;dep1&quot;</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">&quot;dep2&quot;</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>d1<span class=\\\"token punctuation\\\">,</span> d2<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> someExportedValue\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">&quot;module&quot;</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">&quot;../file&quot;</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>module<span class=\\\"token punctuation\\\">,</span> file<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">/* ... */</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre></div><p>优点：</p> <ul><li>适合在浏览器环境中异步加载模块</li> <li>可以并行加载多个模块</li></ul> <p>缺点：</p> <ul><li>提高了开发成本，代码的阅读和书写比较困难，模块定义方式的语义不顺畅</li> <li>不符合通用的模块化思维方式，是一种妥协的实现</li></ul> <h3 id=\\\"cmd\\\">CMD</h3> <p>CMD 与 AMD 的区别</p> <ul><li>对于依赖的模块AMD是提前执行，CMD是延迟执行。不过RequireJS从2.0开始，也改成可以延迟执行(根据写法不同，处理方式不通过)</li> <li>CMD推崇依赖就近，AMD推崇依赖前置</li></ul> <div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// module1.js</span>\\n<span class=\\\"token comment\\\">//定义没有依赖的模块</span>\\n<span class=\\\"token function\\\">define</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>require<span class=\\\"token punctuation\\\">,</span> exports<span class=\\\"token punctuation\\\">,</span> module<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  exports<span class=\\\"token punctuation\\\">.</span>foo <span class=\\\"token operator\\\">=</span> value\\n  module<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> value\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre></div><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">//  module4.js</span>\\n<span class=\\\"token comment\\\">//定义有依赖的模块</span>\\n<span class=\\\"token function\\\">define</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>require<span class=\\\"token punctuation\\\">,</span> exports<span class=\\\"token punctuation\\\">,</span> module<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">//引入依赖模块(同步)</span>\\n  <span class=\\\"token keyword\\\">var</span> module2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./module2'</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token comment\\\">//引入依赖模块(异步)</span>\\n    require<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">async</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./module3'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>m3<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token comment\\\">//暴露模块</span>\\n  exports<span class=\\\"token punctuation\\\">.</span>xxx <span class=\\\"token operator\\\">=</span> value\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre></div><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// main.js</span>\\n<span class=\\\"token function\\\">define</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>require<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> m1 <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./module1'</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">var</span> m2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./module4'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre></div><h3 id=\\\"umd-通用模块规范\\\">UMD (通用模块规范)</h3> <p>UMD 兼容了 AMD 和 CommonJS，同时还支持老式的“全局”变量规范：</p> <div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>root<span class=\\\"token punctuation\\\">,</span> factory<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">typeof</span> define <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'function'</span> <span class=\\\"token operator\\\">&amp;&amp;</span> define<span class=\\\"token punctuation\\\">.</span>amd<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// AMD</span>\\n        <span class=\\\"token function\\\">define</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'jquery'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'underscore'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> factory<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">typeof</span> exports <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'object'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// Node, CommonJS之类的</span>\\n        module<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">factory</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'jquery'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'underscore'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// 浏览器全局变量(root 即 window)</span>\\n        root<span class=\\\"token punctuation\\\">.</span>returnExports <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">factory</span><span class=\\\"token punctuation\\\">(</span>root<span class=\\\"token punctuation\\\">.</span>jQuery<span class=\\\"token punctuation\\\">,</span> root<span class=\\\"token punctuation\\\">.</span>_<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>$<span class=\\\"token punctuation\\\">,</span> _<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">//    方法</span>\\n    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">a</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>  \\n    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">b</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">c</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span> \\n \\n    <span class=\\\"token comment\\\">//    暴露公共方法</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n        b<span class=\\\"token punctuation\\\">:</span> b<span class=\\\"token punctuation\\\">,</span>\\n        c<span class=\\\"token punctuation\\\">:</span> c\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div><h3 id=\\\"es6-模块\\\">ES6 模块</h3> <p>ECMAScript6 标准增加的 JavaScript 语言层面的模块体系定义。ES6 模块的设计思想，是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。</p> <div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// module1.js</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">default</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// module2.js</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">bar</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">const</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span>\\n</code></pre></div><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// main.js</span>\\n\\n<span class=\\\"token keyword\\\">import</span> jquery <span class=\\\"token keyword\\\">as</span> $ <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'jquery'</span>\\n<span class=\\\"token keyword\\\">import</span> foo <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./module1'</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span>bar<span class=\\\"token punctuation\\\">,</span>a<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./module2'</span>\\n</code></pre></div><p>ES6 模块与 CommonJS 模块的差异</p> <ul><li>CommonJS 模块输出的是一个值的拷贝，ES6 模块输出的是值的引用。</li> <li>CommonJS 模块是运行时加载，ES6 模块是编译时输出接口。</li></ul> \"),_c('comment-comment')],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}