{"remainingRequest":"/Users/gbh/Desktop/gbh/blog/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/gbh/Desktop/gbh/blog/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/gbh/Desktop/gbh/blog/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/gbh/Desktop/gbh/blog/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/gbh/Desktop/gbh/blog/docs/js/mutationObserver.md?vue&type=template&id=1dbfd245&","dependencies":[{"path":"/Users/gbh/Desktop/gbh/blog/docs/js/mutationObserver.md","mtime":1548231093899},{"path":"/Users/gbh/Desktop/gbh/blog/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/gbh/Desktop/gbh/blog/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/gbh/Desktop/gbh/blog/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/gbh/Desktop/gbh/blog/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/gbh/Desktop/gbh/blog/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":499162500000}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_c('h1',{attrs:{\"id\":\"mutationobserver\"}},[_vm._v(\"MutationObserver\")]),_vm._v(\" \"),_c('p',[_vm._v(\"Mutation Observer API 用来监视 DOM 变动。DOM 的任何变动，比如节点的增减、属性的变动、文本内容的变动，这个 API 都可以得到通知。\")]),_vm._v(\" \"),_c('p',[_vm._v(\"DOM 的变动会触发 Mutation Observer 事件，但与事件不同的是，Mutation Observer 是异步触发，也就是说，Mutation Observer 事件会在所有的 DOM 操作完成后才触发一次。\")]),_vm._v(\" \"),_c('h3',{attrs:{\"id\":\"实例\"}},[_vm._v(\"实例\")]),_vm._v(\" \"),_c('p',[_vm._v(\"回调函数接受两个参数，一个是变动的数组，一个是观察器实例\")]),_vm._v(\" \"),_vm._m(0),_c('h3',{attrs:{\"id\":\"方法\"}},[_vm._v(\"方法\")]),_vm._v(\" \"),_c('h4',{attrs:{\"id\":\"_1-observe\"}},[_vm._v(\"1. observe\")]),_vm._v(\" \"),_vm._m(1),_vm._v(\" \"),_c('p',[_vm._v(\"第一个是需要观察的节点\")]),_vm._v(\" \"),_c('p',[_vm._v(\"第二个是配置对象，配置项的前三项必须至少设置一项，否则会报错\")]),_vm._v(\" \"),_vm._m(2),_c('h4',{attrs:{\"id\":\"_2-disconnect\"}},[_vm._v(\"2.disconnect\")]),_vm._v(\" \"),_vm._m(3),_vm._v(\" \"),_c('h4',{attrs:{\"id\":\"_3-takerecords\"}},[_vm._v(\"3. takeRecords\")]),_vm._v(\" \"),_vm._m(4),_vm._v(\" \"),_c('h3',{attrs:{\"id\":\"mutationrecord\"}},[_vm._v(\"MutationRecord\")]),_vm._v(\" \"),_c('p',[_vm._v(\"DOM 每次发生变化，就会生成一条变动记录（MutationRecord 实例）。该实例包含了与变动相关的所有信息。Mutation Observer 返回的第一个参数就是一个个MutationRecord实例所组成的数组。\")]),_vm._v(\" \"),_vm._m(5),_vm._v(\" \"),_vm._m(6),_vm._v(\" \"),_c('comment-comment')],1)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-javascript extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-javascript\"}},[_c('code',[_c('span',{pre:true,attrs:{\"class\":\"token keyword\"}},[_vm._v(\"let\")]),_vm._v(\" observer \"),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\"=\")]),_vm._v(\" \"),_c('span',{pre:true,attrs:{\"class\":\"token keyword\"}},[_vm._v(\"new\")]),_vm._v(\" \"),_c('span',{pre:true,attrs:{\"class\":\"token class-name\"}},[_vm._v(\"MutationObserver\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_c('span',{pre:true,attrs:{\"class\":\"token keyword\"}},[_vm._v(\"function\")]),_vm._v(\" \"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"mutations\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\",\")]),_vm._v(\" observer\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\" \"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"{\")]),_vm._v(\"\\n  mutations\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\".\")]),_c('span',{pre:true,attrs:{\"class\":\"token function\"}},[_vm._v(\"forEach\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_c('span',{pre:true,attrs:{\"class\":\"token keyword\"}},[_vm._v(\"function\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"mutation\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\" \"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"{\")]),_vm._v(\"\\n    console\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\".\")]),_c('span',{pre:true,attrs:{\"class\":\"token function\"}},[_vm._v(\"log\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"mutation\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\n  \"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"}\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\n\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"}\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('code',[_vm._v(\"observe\")]),_vm._v(\"方法用来启动监听，它接受两个参数\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-javascript extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-javascript\"}},[_c('code',[_c('span',{pre:true,attrs:{\"class\":\"token keyword\"}},[_vm._v(\"var\")]),_vm._v(\" container \"),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\"=\")]),_vm._v(\" document\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\".\")]),_c('span',{pre:true,attrs:{\"class\":\"token function\"}},[_vm._v(\"querySelector\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_c('span',{pre:true,attrs:{\"class\":\"token string\"}},[_vm._v(\"'.container'\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\";\")]),_vm._v(\"\\n\\nobserver\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\".\")]),_c('span',{pre:true,attrs:{\"class\":\"token function\"}},[_vm._v(\"observe\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"container\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\",\")]),_vm._v(\" \"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"{\")]),_vm._v(\"\\n  childList\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\":\")]),_c('span',{pre:true,attrs:{\"class\":\"token boolean\"}},[_vm._v(\"true\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\",\")]),_vm._v(\" \"),_c('span',{pre:true,attrs:{\"class\":\"token comment\"}},[_vm._v(\"// 子节点的变动（指新增，删除或者更改）\")]),_vm._v(\"\\n  attributes\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\":\")]),_c('span',{pre:true,attrs:{\"class\":\"token boolean\"}},[_vm._v(\"true\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\",\")]),_vm._v(\" \"),_c('span',{pre:true,attrs:{\"class\":\"token comment\"}},[_vm._v(\"// 属性的变动\")]),_vm._v(\"\\n  characterData\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\":\")]),_c('span',{pre:true,attrs:{\"class\":\"token boolean\"}},[_vm._v(\"true\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\",\")]),_vm._v(\" \"),_c('span',{pre:true,attrs:{\"class\":\"token comment\"}},[_vm._v(\"// 节点内容或节点文本的变动\")]),_vm._v(\"\\n  subtree\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\":\")]),_c('span',{pre:true,attrs:{\"class\":\"token boolean\"}},[_vm._v(\"false\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\",\")]),_vm._v(\" \"),_c('span',{pre:true,attrs:{\"class\":\"token comment\"}},[_vm._v(\"// 是否将该观察器应用于该节点的所有后代节点\")]),_vm._v(\"\\n  attributeOldValue\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\":\")]),_c('span',{pre:true,attrs:{\"class\":\"token boolean\"}},[_vm._v(\"false\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\",\")]),_vm._v(\" \"),_c('span',{pre:true,attrs:{\"class\":\"token comment\"}},[_vm._v(\"// 观察attributes变动时，是否需要记录变动前的属性值\")]),_vm._v(\"\\n  characterDataOldValue\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\":\")]),_c('span',{pre:true,attrs:{\"class\":\"token boolean\"}},[_vm._v(\"false\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\",\")]),_vm._v(\" \"),_c('span',{pre:true,attrs:{\"class\":\"token comment\"}},[_vm._v(\"// 表示观察characterData变动时，是否需要记录变动前的值\")]),_vm._v(\"\\n  attributeFilter\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\":\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"[\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"]\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\",\")]),_vm._v(\" \"),_c('span',{pre:true,attrs:{\"class\":\"token comment\"}},[_vm._v(\"// 表示需要观察的特定属性,如 ['class','src']\")]),_vm._v(\"\\n\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"}\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('code',[_vm._v(\"disconnect()\")]),_vm._v(\"方法用来停止观察\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('code',[_vm._v(\"takeRecords()\")]),_vm._v(\"方法用来清除变动记录，即不再处理未处理的变动。该方法返回变动记录的数组。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('code',[_vm._v(\"MutationRecord\")]),_vm._v(\"中包含的信息\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ul',[_c('li',[_vm._v(\"type：观察的变动类型（attribute、characterData或者childList）。\")]),_vm._v(\" \"),_c('li',[_vm._v(\"target：发生变动的DOM节点。\")]),_vm._v(\" \"),_c('li',[_vm._v(\"addedNodes：新增的DOM节点。\")]),_vm._v(\" \"),_c('li',[_vm._v(\"removedNodes：删除的DOM节点。\")]),_vm._v(\" \"),_c('li',[_vm._v(\"previousSibling：前一个同级节点，如果没有则返回null。\")]),_vm._v(\" \"),_c('li',[_vm._v(\"nextSibling：下一个同级节点，如果没有则返回null。\")]),_vm._v(\" \"),_c('li',[_vm._v(\"attributeName：发生变动的属性。如果设置了attributeFilter，则只返回预先指定的属性。\")]),_vm._v(\" \"),_c('li',[_vm._v(\"oldValue：变动前的值。这个属性只对attribute和characterData变动有效，如果发生childList变动，则返回null。\")])])}]\n\nexport { render, staticRenderFns }"]}