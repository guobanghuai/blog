{"remainingRequest":"/Users/gbh/Desktop/gbh/blog/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/gbh/Desktop/gbh/blog/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/gbh/Desktop/gbh/blog/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/gbh/Desktop/gbh/blog/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/gbh/Desktop/gbh/blog/docs/js/documentFragment.md?vue&type=template&id=5a2c12be&","dependencies":[{"path":"/Users/gbh/Desktop/gbh/blog/docs/js/documentFragment.md","mtime":1548228517317},{"path":"/Users/gbh/Desktop/gbh/blog/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/gbh/Desktop/gbh/blog/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/gbh/Desktop/gbh/blog/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/gbh/Desktop/gbh/blog/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/gbh/Desktop/gbh/blog/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":499162500000}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"documentfragment\\\">DocumentFragment</h1> <p><code>DocumentFragment</code>接口表示没有父级的最小文档对象</p> <p>因为<code>DocumentFragment</code>不是真实 DOM 树的其中一部分，它的变化不会引起 DOM 树的重新渲染操作(reflow) ，因此不会导致性能问题。</p> <p>当我们需要修改多个节点时，可以创建一个<code>DocumentFragment</code>，在此节点进行添加(append)或被插入(inserted)操作。因为所有的节点会被一次性插入到文档中，而这个操作仅发生一个重渲染的操作，而不是每个节点分别被插入到文档中，因为后者会发生多次重渲染的操作。</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">let</span> frag <span class=\\\"token operator\\\">=</span> document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createDocumentFragment</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">100</span><span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> p <span class=\\\"token operator\\\">=</span> document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createElement</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;P&quot;</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">let</span> text <span class=\\\"token operator\\\">=</span> document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createTextNode</span><span class=\\\"token punctuation\\\">(</span>i<span class=\\\"token punctuation\\\">)</span>\\n  p<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">appendChild</span><span class=\\\"token punctuation\\\">(</span>text<span class=\\\"token punctuation\\\">)</span>\\n  frag<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">appendChild</span><span class=\\\"token punctuation\\\">(</span>p<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\ndocument<span class=\\\"token punctuation\\\">.</span>body<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">appendChild</span><span class=\\\"token punctuation\\\">(</span>frag<span class=\\\"token punctuation\\\">)</span>\\n</code></pre></div> \"),_c('comment-comment')],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}