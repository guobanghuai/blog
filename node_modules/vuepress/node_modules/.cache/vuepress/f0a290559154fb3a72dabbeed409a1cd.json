{"remainingRequest":"/Users/gbh/Desktop/gbh/blog/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/gbh/Desktop/gbh/blog/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/gbh/Desktop/gbh/blog/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/gbh/Desktop/gbh/blog/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/gbh/Desktop/gbh/blog/docs/js/mutationObserver.md?vue&type=template&id=1dbfd245&","dependencies":[{"path":"/Users/gbh/Desktop/gbh/blog/docs/js/mutationObserver.md","mtime":1548230079848},{"path":"/Users/gbh/Desktop/gbh/blog/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/gbh/Desktop/gbh/blog/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/gbh/Desktop/gbh/blog/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/gbh/Desktop/gbh/blog/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/gbh/Desktop/gbh/blog/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":499162500000}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"mutationobserver\\\">MutationObserver</h1> <p>Mutation Observer API 用来监视 DOM 变动。DOM 的任何变动，比如节点的增减、属性的变动、文本内容的变动，这个 API 都可以得到通知。</p> <p>DOM 的变动会触发 Mutation Observer 事件，但与事件不同的是，Mutation Observer 是异步触发，也就是说，Mutation Observer 事件会在所有的 DOM 操作完成后才触发一次。</p> <h3 id=\\\"实例\\\">实例</h3> <p>回调函数接受两个参数，一个是变动的数组，一个是观察器实例</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">let</span> observer <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">MutationObserver</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>mutations<span class=\\\"token punctuation\\\">,</span> observer<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  mutations<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">forEach</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>mutation<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>mutation<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre></div><h3 id=\\\"方法\\\">方法</h3> <h4 id=\\\"_1-observe\\\">1. observe</h4> <p><code>observe</code>方法用来启动监听，它接受两个参数</p> <p>第一个是需要观察的节点</p> <p>第二个是配置对象，配置项的前三项必须至少设置一项，否则会报错</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">var</span> container <span class=\\\"token operator\\\">=</span> document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">querySelector</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'.container'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nobserver<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">observe</span><span class=\\\"token punctuation\\\">(</span>container<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>\\n  childList<span class=\\\"token punctuation\\\">:</span><span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token comment\\\">// 子节点的变动（指新增，删除或者更改）</span>\\n  attributes<span class=\\\"token punctuation\\\">:</span><span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token comment\\\">// 属性的变动</span>\\n  characterData<span class=\\\"token punctuation\\\">:</span><span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token comment\\\">// 节点内容或节点文本的变动</span>\\n  subtree<span class=\\\"token punctuation\\\">:</span><span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token comment\\\">// 是否将该观察器应用于该节点的所有后代节点</span>\\n  attributeOldValue<span class=\\\"token punctuation\\\">:</span><span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token comment\\\">// 观察attributes变动时，是否需要记录变动前的属性值</span>\\n  characterDataOldValue<span class=\\\"token punctuation\\\">:</span><span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token comment\\\">// 表示观察characterData变动时，是否需要记录变动前的值</span>\\n  attributeFilter<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token comment\\\">// 表示需要观察的特定属性,如 ['class','src']</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre></div><h4 id=\\\"_2-disconnect\\\">2.disconnect</h4> <p><code>disconnect()</code>方法用来停止观察</p> <h4 id=\\\"_3-takerecords\\\">3. takeRecords</h4> <p><code>takeRecords()</code>方法用来清除变动记录，即不再处理未处理的变动。该方法返回变动记录的数组。</p> <h3 id=\\\"mutationrecord\\\">MutationRecord</h3> <p>DOM 每次发生变化，就会生成一条变动记录（MutationRecord 实例）。该实例包含了与变动相关的所有信息。Mutation Observer 返回的第一个参数就是一个个MutationRecord实例所组成的数组。</p> <p><code>MutationRecord</code>中包含的信息</p> <ul><li>type：观察的变动类型（attribute、characterData或者childList）。</li> <li>target：发生变动的DOM节点。</li> <li>addedNodes：新增的DOM节点。</li> <li>removedNodes：删除的DOM节点。</li> <li>previousSibling：前一个同级节点，如果没有则返回null。</li> <li>nextSibling：下一个同级节点，如果没有则返回null。</li> <li>attributeName：发生变动的属性。如果设置了attributeFilter，则只返回预先指定的属性。</li> <li>oldValue：变动前的值。这个属性只对attribute和characterData变动有效，如果发生childList变动，则返回null。</li></ul> \"),_c('comment-comment')],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}